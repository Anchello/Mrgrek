(function() {
    var Assist = {
        isMobile: {
            Android: function () {
                return navigator.userAgent.match(/Android/i);
            },
            BlackBerry: function () {
                return navigator.userAgent.match(/BlackBerry/i);
            },
            iOS: function () {
                return navigator.userAgent.match(/iPhone|iPad|iPod/i);
            },
            Opera: function () {
                return navigator.userAgent.match(/Opera Mini/i);
            },
            Windows: function () {
                return navigator.userAgent.match(/IEMobile/i);
            },
            any: function () {
                return ( Assist.isMobile.Android() || Assist.isMobile.BlackBerry() || Assist.isMobile.iOS() || Assist.isMobile.Opera() || Assist.isMobile.Windows() );
            }
        }
    };

    window.Assist = Assist;
}());

(function( $, global ) {
    var init = function() {
        var screen_width = $( window ).width();

        $.nav();
        $.startscreen();
        $.gmap();
        $.carousel();
        $.modal();
        $.tabs();

        if ( screen_width > 767) {
            $.sliders();
        };
    };

    $(document).ready(function(){
        $(".sender").fadeOut(6000);
    });

    $( document ).on( 'DOMContentLoaded', init );
}( jQuery, jQuery( window ) ));

(function( $, g ) {
    var Carousel = function() {
        this.news = $( '.news-section' );
        this.carousel = $( '.news-carousel' );
        this.items = $( '.news-carousel__item' );
        this.prev_button =  $( '.news-carousel__btn--prev' );
        this.next_button = $( '.news-carousel__btn--next' );
        this.indexes = {
            current: 0,
            count: this.items.length,
            next: 0,
            prev: 0
        };

        this.defaults = {
            current_cls: 'news-carousel__item--current'
        };
    };

    Carousel.prototype = {
        init: function() {
            var context = this;

            if ( this.news && this.news.length > 0 ) {
                this.indexes.current = 1;

                this.indexize();

                g.on('load', function() {
                    setTimeout(function() {
                        context.render.call( context );
                    }, 300);
                });

                g.on('resize', function() {
                    setTimeout(function() {
                        context.render.call( context );
                    }, 300);
                });

                this.prev_button.on('click', function( e ) {
                    context.eventPrevSlide.call( context );

                    e.preventDefault();

                    return false;
                });

                this.next_button.on('click', function( e ) {
                    context.eventNextSlide.call( context );

                    e.preventDefault();

                    return false;
                });

                if ( Assist.isMobile.any() ) {
                    this.news.hammer({
                        direction: Hammer.DIRECTION_HORIZONTAL
                    }).on('swipe', function() {
                        context.eventSwipe.call( context );
                    });
                }
            }
        },

        render: function() {
            var item_height = this.items.outerHeight ();

            this.items.css( 'position', 'absolute' );

            this.carousel.css( 'height', item_height );

            this.reOrder();
        },

        indexize: function() {
            if ( this.indexes.current === 0 ) {
                this.indexes.prev = this.indexes.count - 1;
                this.indexes.next = this.indexes.current + 1;
            } else if ( this.indexes.current === this.indexes.count - 1 ) {
                this.indexes.prev = this.indexes.count - 2;
                this.indexes.next = 0;
            } else {
                this.indexes.prev = this.indexes.current - 1;
                this.indexes.next = this.indexes.current + 1;
            }
        },

        setTranslateX: function( element, value ) {
            element.css({
                '-webkit-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-moz-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-ms-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-o-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                'transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)'
            });
        },

        animateTranslateX: function( element, start, value ) {
            var context = this;

            $({
                offset: start
            }).stop().animate({
                offset: value
            }, {
                duration: 650,
                step: function( now ) {
                    context.setTranslateX( element, now );
                }
            });
        },

        reOrder: function() {
            var context = this,
                offset = g.width(),
                item_width = this.items.outerWidth();

            this.items.each(function( index, item ) {
                item = $( item );

                if ( index === context.indexes.current ) {
                    context.setTranslateX( item, item_width );
                    item.addClass(context.defaults.current_cls);
                } else if ( index === context.indexes.prev ) {
                    context.setTranslateX( item, 0 );
                } else if ( index > context.indexes.current ) {
                    context.setTranslateX( item, ( offset * 2 ) );
                } else if ( index < context.indexes.prev ) {
                    context.setTranslateX( item, ( - offset ) );
                }
            });
        },

        toRight: function () {
            var context = this,
                offset = g.width(),
                item_width = this.items.outerWidth(),
                current = $( this.items[ this.indexes.current ] ),
                prev = $( this.items[ this.indexes.prev ] ),
                // old_next = $( this.items[ this.indexes.next + 1 ] ),
                next = $( this.items[ this.indexes.next ] );

            if ( this.indexes.current === this.indexes.count - 1 ) {
                this.items.each(function( index, item ) {
                    item = $( item );

                    if ( index > context.indexes.next ) {
                        context.setTranslateX( item, ( - offset ) );
                    }
                });
            }

            this.animateTranslateX( current, 0, item_width );
            current.addClass(this.defaults.current_cls);
            this.animateTranslateX( prev, ( - offset ), 0 );
            this.animateTranslateX( next, item_width, ( offset * 2 ) );
            next.removeClass(this.defaults.current_cls);
        },

        toLeft: function () {
            var context = this,
                offset = g.width(),
                item_width = this.items.outerWidth(),
                current = $( this.items[ this.indexes.current ] ),
                prev = $( this.items[ this.indexes.prev ] ),
                old_prev = $( this.items[ this.indexes.prev - 1 ] );
                // next = $( this.items[ this.indexes.next ] );

            if ( this.indexes.current === this.indexes.count - 1 ) {
                this.items.each(function( index, item ) {
                    item = $( item );

                    if ( index < context.indexes.prev ) {
                        context.setTranslateX( item, ( offset * 2 ) );
                    }
                });
            }

            if ( old_prev && old_prev.length > 0 ) {
                this.animateTranslateX( old_prev, 0, ( - offset ) );
            }

            if ( context.indexes.current === 1 ) {
                old_prev = $( this.items[ this.indexes.count - 1 ] );

                this.animateTranslateX( old_prev, 0, ( - offset ) );
            }

            this.animateTranslateX( current, ( offset * 2 ), item_width );
            current.addClass(this.defaults.current_cls);
            this.animateTranslateX( prev, item_width, 0 );
            prev.removeClass(this.defaults.current_cls);
        },

        eventPrevSlide: function() {
            this.indexes.current = this.indexes.prev;

            this.indexize();
            this.toRight();
        },

        eventNextSlide: function() {
            this.indexes.current = this.indexes.next;

            this.indexize();
            this.toLeft();
        },

        eventSwipe: function() {
            var data = this.news.data( 'hammer' ),
                direction = data.session.lastInterval.direction,
                menu_called = data.session.offsetDelta.x > g.width() - 30,
                menu = $( '.mobile-menu' );

            if ( !menu_called && direction === 2 && !menu.hasClass( 'mobile-menu--display' ) ) {
                this.indexes.current = this.indexes.next;

                this.indexize();
                this.toLeft();
            } else if ( direction === 4 && !menu.hasClass( 'mobile-menu--display' ) ) {
                this.indexes.current = this.indexes.prev;

                this.indexize();
                this.toRight();
            }
        }
    };

    $.carousel = function() {
        return new Carousel().init();
    };
}( jQuery, jQuery( window ) ));

(function ( $ ) {
    $( document ).ready(function(){
        var dropdown = $( '.header-nav__item--more' ),
            arrow = $( '.header-nav__link .icon--arrow' ),
            list = '.header-nav__sublist';

        dropdown.hover(function () {
            clearTimeout( $.data( this,'timer' ) );

            $( list,this ).stop( true,true ).slideDown(300);

            $(this).find( arrow ).css( 'transform','rotate(180deg)' );
        }, function () {
            $.data( this,'timer', setTimeout( $.proxy(function() {
                $( list,this ).stop( true,true ).slideUp(300);

                $(this).find( arrow ).css( 'transform','rotate(0deg)' );
            }, this), 100));
        });
    })
}( jQuery, jQuery( window ) ));

(function ($) {
    $(document).ready(function(){

        if ($(window).width() <= '400') {
            $( '.jRating' ).jRating({
                step : true,
                rateMax: 10,
                type : 'small',
                length : 10
            });
        } else {
            $( '.jRating' ).jRating({
                step : true,
                rateMax: 10,
                type : 'big',
                length : 10
            });
        };
    });

} ( jQuery ));
(function( $, g ) {
    var GMap = function() {
        this.map = $( '.map' );
    };

    GMap.prototype = {
        init: function() {
            var context = this,
                script = document.createElement('script'),
                api_key = 'AIzaSyC9Y6AtwNHYL36BNg6kfmqo4L6DgLOdLac';

            if ( this.map && this.map.length > 0 ) {
                script.src = 'https://maps.googleapis.com/maps/api/js?key=' + api_key;

                script.addEventListener('load', function() {
                    context.build.call( context );
                });

                document.head.appendChild( script );
            }
        },

        build: function () {
            var Map, InfoBox, Marker, placemark,
                lat = parseFloat( this.map.data( 'lat' ) ),
                long = parseFloat( this.map.data( 'long' ) ),
                zoom = Number( this.map.data( 'zoom' ) ),
                address = this.map.data( 'address' ),
                grayscale = [
                    {
                        featureType: "all",
                        elementType: "all",
                        stylers: [
                            {
                                saturation: -100
                            }
                        ]
                    }
                ],
                options = {
                    center: {
                        lat: lat,
                        lng: long
                    },
                    styles: grayscale,
                    scrollwheel: false,
                    zoom: zoom
                };

            placemark = new google.maps.MarkerImage(
                'img/marker.png',
                new google.maps.Size(176, 178),
                new google.maps.Point(0, 0),
                new google.maps.Point(100, 180)
            );

            Map = new google.maps.Map( this.map.get( 0 ), options );

            Marker = new google.maps.Marker({
                position: {
                    lat: lat,
                    lng: long
                },
                map: Map,
                icon: placemark
            });

            InfoBox = new google.maps.InfoWindow({
                content: address
            });

            google.maps.event.addListener(Marker, 'click', function() {
                InfoBox.open(Map, Marker);
            });
        }
    };

    $.gmap = function() {
        return new GMap().init();
    };
}( jQuery, jQuery( window ) ));

(function( $, g ) {
    var Mobile = function() {
        this.header = $( '.header' );
        this.nav = $( '.mobile-nav' );
        this.contact = $( '.mobile-nav__contact' );
        this.menu = $( '.mobile-menu' );
        this.mob_next = $('.mobile-nav__link--more');
        this.mob_back = $('.mobile-nav__subitem--back');
        this.mob_list = $('.mobile-nav__list');
        this.mob_sublist = $('.mobile-nav__sublist');
    };

    Mobile.prototype = {
        init: function() {
            var context = this;

            if ( this.header && this.header.length > 0 ) {

                this.mob_next.on('click', function( e ) {
                    context.sublistShow.call( context );

                    e.preventDefault();

                    setTimeout(function() {
                        context.contactMove.call( context );
                    }, 300);
                });

                this.mob_back.on('click', function(e) {
                    context.sublistHide.call( context );

                    e.preventDefault();

                    setTimeout(function() {
                        context.contactBack.call( context );
                    }, 300);
                });
            }
        },

        sublistShow: function() {
            var context = this;

            context.mob_sublist.slideDown(300);
            context.mob_list.slideUp(300);
        },

        sublistHide: function() {
            var context = this;

            context.mob_sublist.slideUp(300);
            context.mob_list.slideDown(300);
        },


        contactMove: function() {
            var screen_height = g.height(),
                nav_height = this.nav.outerHeight(),
                header_height = this.header.outerHeight(),
                sublist_height = this.mob_sublist.outerHeight(),
                contact_height = this.contact.outerHeight();

            if ( screen_height < 767 ) {
                if  ( nav_height > ( screen_height -  header_height - contact_height) ) {
                    this.contact.css( 'bottom' , (screen_height - sublist_height - header_height - contact_height)  );
                }
            }
        },

        contactBack: function() {
            var screen_height = g.height();

            if ( screen_height < 767 ) {
                this.contact.css( 'bottom' , 0 );
            }
        }
    };

    $.mobile = function() {
        return new Mobile().init();
    };
}( jQuery, jQuery( window ) ));
(function( $, g ) {
    var Modal = function() {
        this.body = $( 'body' );
        this.overlay = $( '.modal-overlay' );
        this.substrate = $( '.modal-overlay__substrate' );
        this.modals = $( '.modal' );
        this.buttons = $( '.modal-button' );
        this.closes = $( '.modal__close' );

        this.defaults = {
            body_cls: 'page--overlay',
            modal_cls: 'modal--show',
            overlay_cls: 'modal-overlay--show'
        };
    };

    Modal.prototype = {
        init: function() {
            var context = this,
                defaults = this.defaults,
                doc = $( document );

            if ( this.modals && this.modals.length > 0 ) {
                g.on('load', function() {
                    context.render.call( context );
                });

                g.on('resize', function() {
                    context.resizeModals.call( context );
                });

                this.buttons.on('click', function( e ) {
                    context.eventShowModal.call( context, $( this ) );

                    e.preventDefault();

                    return false;
                });

                this.closes.on('click', function( e ) {
                    context.eventCloseModal.call( context, $( this ) );

                    e.preventDefault();

                    return false;
                });

                this.substrate.on('click', function( e ) {
                    context.modalClose.call( context, $( '.' + defaults.modal_cls ) );

                    e.preventDefault();

                    return false;
                });
            }
        },

        render: function() {
            this.overlay.css( 'opacity', 0 );

            this.resizeModals();
        },

        resizeModals: function() {
            var context = this,
                defaults = this.defaults,
                offset = g.width();

            this.modals.each(function( index, modal ) {
                modal = $( modal );

                if ( !modal.hasClass( defaults.modal_cls ) ) {
                    context.setTranslateX( modal, ( - offset ) );
                }
            });
        },

        setTranslateX: function( element, value ) {
            element.css({
                '-webkit-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-moz-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-ms-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-o-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                'transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)'
            });
        },

        setTranslateY: function( element, x, y ) {
            element.css({
                '-webkit-transform': 'matrix(1, 0, 0, 1, ' + x + ', ' + y + ')',
                '-moz-transform': 'matrix(1, 0, 0, 1, ' + x + ', ' + y + ')',
                '-ms-transform': 'matrix(1, 0, 0, 1, ' + x + ', ' + y + ')',
                '-o-transform': 'matrix(1, 0, 0, 1, ' + x + ', ' + y + ')',
                'transform': 'matrix(1, 0, 0, 1, ' + x + ', ' + y + ')'
            });
        },

        animateTranslateX: function( element, start, value ) {
            var context = this;

            $({
                offset: start
            }).stop().animate({
                offset: value
            }, {
                duration: 650,
                step: function( now ) {
                    context.setTranslateX( element, now );
                }
            });
        },

        animateTranslateY: function( element, start, x, y ) {
            var context = this;

            $({
                offset: start
            }).stop().animate({
                offset: y
            }, {
                duration: 650,
                step: function( now ) {
                    context.setTranslateY( element, x, now );
                }
            });
        },

        modalClose: function( modal, opened ) {
            var context = this,
                offset = g.width(),
                defaults = this.defaults;

            if ( modal.length > 0 && modal.hasClass( defaults.modal_cls ) ) {
                if ( !opened ) {
                    this.overlay.animate({
                        opacity: 0
                    }, 650);
                }

                this.animateTranslateX( modal, 0, ( offset * 2 ) );

                setTimeout(function() {
                    if ( !opened ) {
                        context.body.removeClass( defaults.body_cls );
                        context.overlay.removeClass( defaults.overlay_cls );
                    }

                    modal.removeClass( defaults.modal_cls );

                    setTimeout(function() {
                        context.setTranslateX( modal, ( - offset ) );
                    }, 10);
                }, 650);
            }
        },

        modalCloseDown: function( modal ) {
            var context = this,
                offset = g.height(),
                defaults = this.defaults;

            if ( modal.length > 0 && modal.hasClass( defaults.modal_cls ) ) {
                this.animateTranslateY( modal, 0, 0, offset );

                setTimeout(function() {
                    context.body.removeClass( defaults.body_cls );
                    context.overlay.removeClass( defaults.overlay_cls );

                    modal.removeClass( defaults.modal_cls );

                    setTimeout(function() {
                        context.setTranslateY( modal, ( - offset ), 0 );
                    }, 10);
                }, 650);
            }
        },

        eventShowModal: function( button ) {
            var offset = g.width(),
                defaults = this.defaults,
                modal_name = button.data( 'modal' ),
                modal = $( '.modal--' + modal_name ),
                opened_modal = $( '.' + defaults.modal_cls );

            if ( modal.length > 0 && !modal.hasClass( defaults.modal_cls ) ) {
                if ( opened_modal.length > 0 ) {
                    this.modalClose( opened_modal, true );
                }

                this.body.addClass( defaults.body_cls );
                this.overlay.addClass( defaults.overlay_cls );

                modal.addClass( defaults.modal_cls );

                this.overlay.animate({
                    opacity: 1
                }, 650);

                this.animateTranslateX( modal, ( - offset ), 0 );
            }
        },

        eventCloseModal: function( button ) {
            var defaults = this.defaults,
                modal = button.parent();

            if ( modal.length > 0 && modal.hasClass( defaults.modal_cls ) ) {
                this.modalClose( modal );
            }
        }
    };

    $.modal = function() {
        return new Modal().init();
    };
}( jQuery, jQuery( window ) ));

(function( $, g ) {
    var Nav = function() {
        this.body = $( 'body' );
        this.header = $( '.header' );
        this.nav = $( '.mobile-nav' );
        this.contact = $( '.mobile-nav__contact' );
        this.menu = $( '.mobile-menu' );
        this.hamburger = $( '.header__icon-menu' );
        this.close = $( '.mobile-menu__close' );
        this.scroll_button = $( '.scroll-to' );

        this.mob_next = $('.mobile-nav__next');
        this.mob_back = $('.mobile-nav__back');
        this.mob_list = $('.mobile-nav__list');
        this.mob_sublist = $('.mobile-nav__sublist');

        this.defaults = {
            scroll_top: g.scrollTop(),
            // current_scroll: 'page-nav__link--curent',
            display_cls: 'mobile-menu--display',
            show_cls: 'mobile-menu--show'
        };
    };

    Nav.prototype = {
        init: function() {
            var context = this,
                defaults = this.defaults;

            if ( this.header && this.header.length > 0 ) {

                if ( this.nav && this.nav.length > 0 ) {
                    g.on('resize', function() {
                        setTimeout(function() {
                            context.contactMove.call( context );
                        }, 100);
                    });
                }

                this.hamburger.on('click', function( e ) {
                    context.eventShowMenu.call( context );

                    e.preventDefault();

                    context.contactMove.call( context );

                    return false;
                });

                this.close.on('click', function( e ) {
                    context.eventCloseMenu.call( context );

                    e.preventDefault();

                    context.contactMove.call( context );

                    return false;
                });

                this.mob_next.on('click', function( e ) {
                    context.sublistShow.call( context, $( this ) );

                    e.preventDefault();

                    setTimeout(function() {
                        context.contactMove.call( context );
                    }, 300);
                });

                this.mob_back.on('click', function(e) {
                    context.sublistHide.call( context, $( this ) );

                    setTimeout(function() {
                        context.contactMove.call( context );
                    }, 500);

                    e.preventDefault();
                });
            }

            if ( this.scroll_button.length > 0 ) {

                this.scroll_button.on('click', function( e ) {
                    context.eventScrollTo.call( context, this, e );

                    e.preventDefault();

                    return false;
                });
            }
        },

        scrollTo: function( target ) {
            var body = $( 'html, body' ),
                target = $( target );


            if ( target.length > 0 ) {
                body.animate({
                    scrollTop: $( target ).offset().top
                }, 600);
            }
        },

        eventShowMenu: function() {
            var context = this;

            context.menu.slideDown(300);
            context.body.addClass( 'page--overlay' );

            context.hamburger.fadeOut();
            context.close.fadeIn();
        },

        eventCloseMenu: function() {
            var context = this,
                defaults = this.defaults;

            context.menu.slideUp(300);
            this.body.removeClass( 'page--overlay' );

            context.hamburger.fadeIn();
            context.close.fadeOut();
        },

        sublistShow: function( mob_next ) {
            var context = this,
                slider_id = mob_next.data( 'sublist' ),
                sublist_item = $( '.mobile-nav__sublist--' + slider_id );

            sublist_item.slideDown(300);

            context.mob_list.slideUp(300);
        },

        sublistHide: function( mob_next ) {
            var context = this;

            context.mob_sublist.slideUp(300);

            context.mob_list.slideDown(300);
        },


        contactMove: function() {
            var screen_height = g.height(),
                nav_height = this.nav.outerHeight(),
                header_height = this.header.outerHeight(),
                sublist_height = this.mob_sublist.outerHeight(),
                contact_height = this.contact.outerHeight();

            if  ( nav_height > ( screen_height -  header_height - contact_height) ) {
                this.contact.css( 'bottom' , (screen_height - nav_height - header_height - contact_height)  );
            } else {
                this.contact.css( 'bottom' , '0');
            }
        },

        eventScrollTo: function( button, e ) {
            var page,
                button = $( button ),
                target = button.attr( 'href' ),
                base = $( 'base' ).attr( 'href' ),
                current_page = location.pathname;

            if ( target.substr( 0, 1 ) !== '#' ) {
                base = base.substr( base.indexOf( '/', 10 ) );
                page = base + target.substr( 0, target.lastIndexOf( '/' ) + 1 );

                if ( page !== current_page ) {
                    location.replace( base + target );
                } else {
                    target = target.substr( target.lastIndexOf( '/' ) + 1 );

                    this.scrollTo( target );
                }
            } else {
                this.scrollTo( target );
            }

            e.preventDefault();

            return false;
        }

    };

    $.nav = function() {
        return new Nav().init();
    };
}( jQuery, jQuery( window ) ));


(function ( $ ) {
    $( document ).ready(function(){
        $(window).scroll(function() {
            var windowTop,
                link = $('.page-nav__link');

            windowTop = window.pageYOffset;

            link.each(function( i,elem ) {
                var target_top,
                    link_top,
                    current_button = $( '.page-nav__link--current'  );

                link_top = $(this).offset().top;
                target = $(this).attr( 'href' );
                target_top = $( target ).offset().top;

                if ( link_top > target_top) {
                    current_button.removeClass( 'page-nav__link--current' );
                    $(this).addClass( 'page-nav__link--current' );
                }

                if ( link_top > 903 && link_top < 2161 || link_top > 3170 && link_top < 4605 || link_top > 5300) {
                    $(this).addClass( 'link-black' );

                } else {
                    $(this).removeClass( 'link-black' );
                }
            });
        });
    })
}( jQuery, jQuery( window ) ));



(function( $, g ) {
    var Tabs = function() {
        this.wedding = $( '.startscreen__weddings' );
        this.tab = $( '.promo__nav' );
        this.wrapper = $( '.promo__wrapper' );
        this.items = $( '.promo__item' );
        this.index = 0;

        this.defaults = {
            tabs_cls: 'promo__nav--current',
            items_cls: 'promo__item--current'
        };
    };

    Tabs.prototype = {
        init: function() {
            var context = this,
                defaults = this.defaults,
                offset = g.width(),
                first_tab = $( this.tab[ this.index ] ),
                first_item = $( this.items[ this.index ] );

            if ( this.tab && this.tab.length > 0 ) {
                first_tab.addClass( defaults.tabs_cls );
                first_item.addClass( defaults.items_cls );

                this.tab.each(function( index, tab ) {
                    $( tab ).data( 'index', index );
                });

                this.items.each(function( index, item ) {
                    $( item ).data( 'index', index );
                });

                g.on('load', function() {
                    setTimeout(function () {
                        if ( (context.team && context.team.length > 0) || (context.other && context.other.length > 0) ) {
                            if (offset > 767) {
                                context.render.call(context);
                            }
                        } else {
                            context.render.call(context);
                        }
                    }, 300);
                });

                g.on('resize', function() {
                    setTimeout(function () {
                        if ( (context.team && context.team.length > 0) || (context.other && context.other.length > 0) ) {
                            if (offset > 767) {
                                context.render.call(context);
                            }
                        } else {
                            context.render.call(context);
                        }
                    }, 300);
                });

                this.tab.on('click', function( e ) {
                    context.eventChangeTab.call( context, $( this ) );

                    e.preventDefault();

                    return false;
                });
            }
        },

        render: function() {
            var context = this,
                prevoius = true,
                defaults = this.defaults,
                offset = g.width();

            this.items.each(function( index, item ) {
                item = $( item );

                if ( item.hasClass( defaults.items_cls ) ) {
                    prevoius = false;
                } else if ( prevoius ) {
                    context.setTranslateX( item, ( - offset ) );
                } else {
                    context.setTranslateX( item, ( offset * 2 ) );
                }
            });

            this.resizeWrapper();
        },

        resizeWrapper: function() {
            var defaults = this.defaults,
                current_tab = $( '.' + defaults.items_cls );

            this.items.css( 'position', 'absolute' );

            this.wrapper.css( 'height', current_tab.outerHeight() );
        },

        setTranslateX: function( element, value ) {
            element.css({
                '-webkit-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-moz-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-ms-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-o-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                'transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)'
            });
        },

        animateTranslateX: function( element, start, value ) {
            var context = this;

            $({
                offset: start
            }).stop().animate({
                offset: value
            }, {
                duration: 650,
                step: function( now ) {
                    context.setTranslateX( element, now );
                }
            });
        },

        changeTab: function( index, tab ) {
            var defaults = this.defaults,
                tab_id = Number( tab.data( 'index' ) ),
                current_item = $( '.' + defaults.items_cls ),
                new_item = $( this.items[ tab_id ] ),
                current_tab = $( '.' + defaults.tabs_cls ),
                screen_width = g.width();

            current_tab.removeClass( defaults.tabs_cls );

            tab.addClass( defaults.tabs_cls );

            current_item.removeClass( defaults.items_cls );
            new_item.addClass( defaults.items_cls );

            if ( this.index > index ) {
                this.animateTranslateX( current_item, 0, ( screen_width * 2 ) );
                this.animateTranslateX( new_item, ( - screen_width ), 0 );
            } else {
                this.animateTranslateX( current_item, 1, ( - screen_width ) );
                this.animateTranslateX( new_item, ( screen_width * 2 ), 0 );
            }

            this.index = index;

            this.resizeWrapper();

            if ( this.other && this.other.length > 0 ) {
                if ( this.index === 1 ) {
                    this.other.css( 'background-image', 'url(../img/other_bg2.jpg)' );
                } else if ( this.index === 2 ) {
                    this.other.css( 'background-image', 'url(../img/other_bg3.jpg)' );
                    // this.other.addClass( 'other--auto' );
                    // this.other.removeClass ( 'other--shoes' );
                } else {
                    this.other.css( 'background-image', 'url(../img/other_bg1.jpg)' );
                    // this.other.removeClass ( 'other--shoes' );
                    // this.other.removeClass ( 'other--auto' );
                }
            };

            if ( this.wedding && this.wedding.length > 0 ) {
                if ( this.index === 1 ) {
                    this.wedding.css( 'background-image', 'url(../img/wedding_bg2.jpg)' );
                } else {
                    this.wedding.css( 'background-image', 'url(../img/wedding_bg1.jpg)' );
                }
            };
        },

        eventChangeTab: function( tab ) {
            var defaults = this.defaults,
                index = Number( tab.data( 'index' ) );

            if ( !tab.hasClass( defaults.tabs_cls ) ) {
                this.changeTab( index, tab );
            }
        }
    };

    $.tabs = function() {
        return new Tabs().init();
    };
}( jQuery, jQuery( window ) ));



(function( $, g ) {
    var Sliders = function() {
        this.service = $( '.sliders' );
        this.buttons = $( '.slider__nav' );
        this.wrapper = $( '.slider__wrapper' );
        this.sliders = $( '.slider' );

        this.defaults = {
            current_button: 'slider__nav--current',
            current_slider: 'slider--current'
        };
    };

    Sliders.prototype = {
        init: function() {
            var context = this,
                screen_width = g.width(),
                defaults = this.defaults;

                if ( this.service && this.service.length > 0 ) {
                    $( this.buttons[ 0 ] ).addClass( defaults.current_button );
                    $( this.sliders[ 0 ] ).addClass( defaults.current_slider );

                    g.on('load', function() {
                        setTimeout(function() {
                            context.render.call( context );
                        }, 300);
                    });

                    g.on('resize', function() {
                        setTimeout(function() {
                            context.render.call( context );
                        }, 300);
                    });

                    this.buttons.on('click', function() {
                        context.eventMenuChange.call( context, $( this ) );

                        context.resizeWrapper();
                    });
                }
        },

        render: function() {
            var context = this,
                defaults = this.defaults,
                screen_width = g.width(),
                current_slider = $( '.' + defaults.current_slider );

            this.sliders.each(function( index, slider ) {
                slider = $( slider );

                if ( !slider.hasClass( defaults.current_slider ) ) {
                    context.setTranslate( slider, ( screen_width * 2 ), 0 );
                }
            });
            this.resizeWrapper();
        },

        resizeWrapper: function() {
            var defaults = this.defaults,
                current_slider = $( '.' + defaults.current_slider );

            this.sliders.css( 'position', 'absolute' );

            this.wrapper.css( 'height', current_slider.outerHeight() );
        },

        setTranslate: function( element, x, y ) {
            element.css({
                '-webkit-transform': 'matrix(1, 0, 0, 1, ' + x + ', ' + y + ')',
                '-moz-transform': 'matrix(1, 0, 0, 1, ' + x + ', ' + y + ')',
                '-ms-transform': 'matrix(1, 0, 0, 1, ' + x + ', ' + y + ')',
                '-o-transform': 'matrix(1, 0, 0, 1, ' + x + ', ' + y + ')',
                'transform': 'matrix(1, 0, 0, 1, ' + x + ', ' + y + ')'
            });
        },

        animateTranslateX: function( element, start, value ) {
            var context = this;

            $({
                offset: start
            }).stop().animate({
                offset: value
            }, {
                duration: 650,
                step: function( now ) {
                    context.setTranslate( element, now, 0 );
                }
            });
        },

        eventMenuChange: function( button ) {
            var slider_id = button.data( 'tabs' ),
                slider = $( '.slider--' + slider_id ),
                defaults = this.defaults,
                current_button = $( '.' + defaults.current_button ),
                current_slider = $( '.' + defaults.current_slider ),

                screen_width = g.width();

            if ( slider && slider.length > 0 && !slider.hasClass( defaults.current_slider ) && !button.hasClass( defaults.current_button ) ) {
                current_button.removeClass( defaults.current_button );
                current_slider.removeClass( defaults.current_slider );

                button.addClass( defaults.current_button );
                slider.addClass( defaults.current_slider );

                this.animateTranslateX( current_slider, 0, ( screen_width * 2 ) );
                this.animateTranslateX( slider, ( screen_width * 2 ), 0 );
            }
        }
    };

    $.sliders = function() {
        return new Sliders().init();
    };
}( jQuery, jQuery( window ) ));
(function( $, g ) {
    var Startscreen = function() {
        this.startscreen = $( '.startscreen' );
        this.wedding = $( '.startscreen__weddings' );
        this.tab = $( '.promo__nav' );
        this.wrapper = $( '.promo__wrapper' );
        this.items = $( '.promo__item' );
        this.index = 0;

        this.defaults = {
            tabs_cls: 'promo__nav--current',
            items_cls: 'promo__item--current'
        };
    };

    Startscreen.prototype = {
        init: function() {
            var context = this,
                defaults = this.defaults,
                offset = g.width(),
                first_tab = $( this.tab[ this.index ] ),
                first_item = $( this.items[ this.index ] );

            if ( this.wedding && this.wedding.length > 0 ) {
                first_tab.addClass( defaults.tabs_cls );
                first_item.addClass( defaults.items_cls );

                this.tab.each(function( index, tab ) {
                    $( tab ).data( 'index', index );
                });

                this.items.each(function( index, item ) {
                    $( item ).data( 'index', index );
                });

                g.on('load', function() {
                    setTimeout(function () {
                            context.render.call(context);
                    }, 300);
                });

                g.on('resize', function() {
                    setTimeout(function () {
                        context.render.call(context);
                    }, 300);
                });

                this.tab.on('click', function( e ) {
                    context.eventChangeTab.call( context, $( this ) );

                    e.preventDefault();

                    return false;
                });
            }
        },

        render: function() {
            var context = this,
                prevoius = true,
                defaults = this.defaults,
                offset = g.width();

            this.items.each(function( index, item ) {
                item = $( item );

                if ( item.hasClass( defaults.items_cls ) ) {
                    prevoius = false;
                } else if ( prevoius ) {
                    context.setTranslateX( item, ( - offset ) );
                } else {
                    context.setTranslateX( item, ( offset * 2 ) );
                }
            });

            this.resizeWrapper();
        },

        resizeWrapper: function() {
            var defaults = this.defaults,
                current_tab = $( '.' + defaults.items_cls );

            this.items.css( 'position', 'absolute' );

            this.wrapper.css( 'height', current_tab.outerHeight() );
        },

        setTranslateX: function( element, value ) {
            element.css({
                '-webkit-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-moz-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-ms-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-o-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                'transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)'
            });
        },

        animateTranslateX: function( element, start, value ) {
            var context = this;

            $({
                offset: start
            }).stop().animate({
                offset: value
            }, {
                duration: 650,
                step: function( now ) {
                    context.setTranslateX( element, now );
                }
            });
        },

        changeTab: function( index, tab ) {
            var defaults = this.defaults,
                tab_id = Number( tab.data( 'index' ) ),
                current_item = $( '.' + defaults.items_cls ),
                new_item = $( this.items[ tab_id ] ),
                current_tab = $( '.' + defaults.tabs_cls ),
                screen_width = g.width();

            current_tab.removeClass( defaults.tabs_cls );

            tab.addClass( defaults.tabs_cls );

            current_item.removeClass( defaults.items_cls );
            new_item.addClass( defaults.items_cls );

            if ( this.index > index ) {
                this.animateTranslateX( current_item, 0, ( screen_width * 2 ) );
                this.animateTranslateX( new_item, ( - screen_width ), 0 );
            } else {
                this.animateTranslateX( current_item, 1, ( - screen_width ) );
                this.animateTranslateX( new_item, ( screen_width * 2 ), 0 );
            };

            this.index = index;

            this.resizeWrapper();

            if ( this.index === 1 ) {
                this.wedding.css( 'background-image', 'url(img/wedding_bg2.jpg)' );
            } else {
                this.wedding.css( 'background-image', 'url(img/wedding_bg1.jpg)' );
            }
        },

        eventChangeTab: function( tab ) {
            var defaults = this.defaults,
                index = Number( tab.data( 'index' ) );

            if ( !tab.hasClass( defaults.tabs_cls ) ) {
                this.changeTab( index, tab );
            }
        }
    };

    $.startscreen = function() {
        return new Startscreen().init();
    };
}( jQuery, jQuery( window ) ));
(function( $, g ) {
    var Tabs = function() {
        this.other = $( '.other' );
        this.team = $( '.team' );
        this.wedding = $( '.startscreen__weddings' );
        this.tab = $( '.tab' );
        this.wrapper = $( '.tab__wrapper' );
        this.items = $( '.tab__article' );
        this.index = 0;

        this.defaults = {
            tabs_cls: 'tab--current',
            items_cls: 'tab__article--current'
        };
    };

    Tabs.prototype = {
        init: function() {
            var context = this,
                defaults = this.defaults,
                offset = g.width(),
                first_tab = $( this.tab[ this.index ] ),
                first_item = $( this.items[ this.index ] );

            if ( this.tab && this.tab.length > 0 ) {
                    first_tab.addClass( defaults.tabs_cls );
                    first_item.addClass( defaults.items_cls );

                    this.tab.each(function( index, tab ) {
                        $( tab ).data( 'index', index );
                    });

                    this.items.each(function( index, item ) {
                        $( item ).data( 'index', index );
                    });

                    g.on('load', function() {
                        setTimeout(function () {
                            if ( (context.team && context.team.length > 0) || (context.other && context.other.length > 0) ) {
                                if (offset > 767) {
                                        context.render.call(context);
                                }
                            } else {
                                    context.render.call(context);
                            }
                        }, 300);
                    });

                    g.on('resize', function() {
                        setTimeout(function () {
                            if ( (context.team && context.team.length > 0) || (context.other && context.other.length > 0) ) {
                                if (offset > 767) {
                                    context.render.call(context);
                                }
                            } else {
                                context.render.call(context);
                            }
                        }, 300);
                    });

                    this.tab.on('click', function( e ) {
                        context.eventChangeTab.call( context, $( this ) );

                        e.preventDefault();

                        return false;
                    });
            }
        },

        render: function() {
            var context = this,
                prevoius = true,
                defaults = this.defaults,
                offset = g.width();

            this.items.each(function( index, item ) {
                item = $( item );

                if ( item.hasClass( defaults.items_cls ) ) {
                    prevoius = false;
                } else if ( prevoius ) {
                    context.setTranslateX( item, ( - offset ) );
                } else {
                    context.setTranslateX( item, ( offset * 2 ) );
                }
            });

            this.resizeWrapper();
        },

        resizeWrapper: function() {
            var defaults = this.defaults,
                current_tab = $( '.' + defaults.items_cls );

            this.items.css( 'position', 'absolute' );

            this.wrapper.css( 'height', current_tab.outerHeight() );
        },

        setTranslateX: function( element, value ) {
            element.css({
                '-webkit-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-moz-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-ms-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                '-o-transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)',
                'transform': 'matrix(1, 0, 0, 1, ' + value + ', 0)'
            });
        },

        animateTranslateX: function( element, start, value ) {
            var context = this;

            $({
                offset: start
            }).stop().animate({
                offset: value
            }, {
                duration: 650,
                step: function( now ) {
                    context.setTranslateX( element, now );
                }
            });
        },

        changeTab: function( index, tab ) {
            var defaults = this.defaults,
                tab_id = Number( tab.data( 'index' ) ),
                current_item = $( '.' + defaults.items_cls ),
                new_item = $( this.items[ tab_id ] ),
                current_tab = $( '.' + defaults.tabs_cls ),
                screen_width = g.width();

            current_tab.removeClass( defaults.tabs_cls );

            tab.addClass( defaults.tabs_cls );

            current_item.removeClass( defaults.items_cls );
            new_item.addClass( defaults.items_cls );

            if ( this.index > index ) {
                this.animateTranslateX( current_item, 0, ( screen_width * 2 ) );
                this.animateTranslateX( new_item, ( - screen_width ), 0 );
            } else {
                this.animateTranslateX( current_item, 1, ( - screen_width ) );
                this.animateTranslateX( new_item, ( screen_width * 2 ), 0 );
            }

            this.index = index;

            this.resizeWrapper();

            if ( this.other && this.other.length > 0 ) {
                if ( this.index === 1 ) {
                    this.other.css( 'background-image', 'url(img/other_bg2.jpg)' );
                } else if ( this.index === 2 ) {
                    this.other.css( 'background-image', 'url(img/other_bg3.jpg)' );
                    // this.other.addClass( 'other--auto' );
                    // this.other.removeClass ( 'other--shoes' );
                } else {
                    this.other.css( 'background-image', 'url(img/other_bg1.jpg)' );
                    // this.other.removeClass ( 'other--shoes' );
                    // this.other.removeClass ( 'other--auto' );
                }
            };
        },

        eventChangeTab: function( tab ) {
            var defaults = this.defaults,
                index = Number( tab.data( 'index' ) );

            if ( !tab.hasClass( defaults.tabs_cls ) ) {
                this.changeTab( index, tab );
            }
        }
    };

    $.tabs = function() {
        return new Tabs().init();
    };
}( jQuery, jQuery( window ) ));


document.addEventListener('DOMContentLoaded', function() {
    var galleryButtonsList = document.querySelectorAll('.gallery__article');
    var galleryButtons = Array.prototype.slice.call(galleryButtonsList);

    galleryButtons.forEach(function(button) {
        button.onclick = function (event) {
            event = event || window.event;
            var target = event.target || event.srcElement,
                link = target.src ? target.parentNode : target,
                options = {index: link, event: event},
                links = this.getElementsByTagName('a');
            blueimp.Gallery(links, options);
        }
    });
});

